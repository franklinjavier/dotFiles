# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} 
	  ? ${2:a} 
	  : ${3:b};
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# while (...) {...}
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {
		${2}
	}, ${1:ms});
# Get Elements
snippet gets
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet geti
	getElementBy${1:Id}('${2}')${3}
# Console log
snippet	cl
	console.log(${1:});${2}
snippet for
	var ${1:i} = 0,
		${2:len} = object.length;
	for ( ; $1 < $2; $1++ ) {
		${3:// object[ i ]}
	};
snippet forin
	var ${1:prop};
	for ( $1 in ${2:obj} ) {
		if ( $2.hasOwnProperty( $1 ) ) {
			${3:$2[ $1 ]}
		}
	};
snippet iffe
	(function() {
		'use strict';
		${1:// closure scope}
	}());
snippet use
	'use strict';
snippet $
	$('${1:selector}')${2}
snippet bench
	// Let's try some benchmarks!

	var iterations = 10000, 
		i = 0;

	console.time('Fancy');

	for( ; i < iterations; i++ ) {
		// This falls back to a SLOW JavaScript dom traversal
		$('#someId');
	}

	console.timeEnd('Fancy');
snippet def
	define(function( require, exports ) {
		'use strict';
		${1}
	});
snippet com
	/**
	 * @desc ${1:Descricao}
	 * @name ${2:Nome do metodo}
	 * @param {} ${3}
	 * @return 
	 * @example 
	 */
snippet req
	var ${1:varName} = require('${2:module-name})
