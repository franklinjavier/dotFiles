snippet p
	<?php ${1} ?>
snippet php
	<?php
	${1}
	?>
snippet var
	$${1:var} = ${2:value};
snippet ph
	<?php ${1}; ?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require ('${1:file}');${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ GET['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{
		${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{
		${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
	    ${2:// code...}
	}
snippet i
	if (${1:/* condition */})
		${2}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
	    case '${2:value}':
	        ${3:// code...}
	    break;
	    ${5}
		default:
	        ${4:// code...}
	    break;
	}
snippet case
	case '${1:value}':
	    ${2:// code...}
	break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	    ${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
	    ${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
	    ${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet dump
	echo '<pre>' . nl2br(print_r(${1:value},true)) . '</pre>';
snippet e
	exit();${1}
#
# Zend Framework specific snippets
#

snippet zfdump
	Zend_Debug::dump(${1})${2:;}
snippet zfn
	$${1:library} = new Zend_${2:library};
snippet zfdate
	$${1:dateVar} = new Zend_Date(${2:constructorValue})${3:;}
snippet zfmsg
	$this->_helper
		 ->FlashMessenger
		 ->addMessage(${1:message})${2:;}
snippet zfnorender
	$this->_helper->viewRenderer->setNoRender()${1:;}
snippet zfgregistry
	Zend_Registry::get('${1:value}')${2:;}
snippet zfgrequest
	$${1:request} = $this->getRequest()${2:;}
snippet zfsession
	$${1:session} = new Zend_Session_Namespace('${2:sessionName}')${3:;}
snippet zfgparam
	$${1:param} = $this->_getParam('${2:paramName}')${3}
snippet zfnmodel
	$${1:modelName} = new Application_Model_${2:model}${3:;}
snippet zfredirector
	$this->_helper->redirector('${1:action}','${2:model}')${3:;}
snippet	zfrender
	$this->render('${1:view}')${2:;}
snippet zfcrender
	$this->render('${1}',null,true)${2:;}
snippet zfvt
	$this->translate('${1}')${2}
snippet zfurl
	$this->url(array('action'=>'${1:action}','controller'=>'${2:'controller'}'),
				'${3:default}',${4:true})
snippet zfaction 
	/**
	 * ${2:Description}
	 *
	 * @return void
	 * @author Rafael Nexus
	 **/
	public function ${1:name}Action()
	{
		${3://code}	
	}
snippet zfcontroller
	/**
	 * ${2:Description}
	 *
	 * @category ${3:category}
	 * @package ${4:package}
	 * @copyright Copyright (c) 2010 Rafael Nexus
	 */

	/**
	 * $1 - $2
	 *
	 * @packaged $3
	 * @author Rafael Nexus
	 **/
	class ${1:name}Controller extends Zend_Controller_Action
	{
		public function init()
		{
			${5://code} 
		}
	}
snippet zfnt
	<tu tuid="${1:label}">
	<tuv xml:lang="en_US">
	<seg>${2:translation}</seg>
	</tuv>
	</tu>
	<tu tuid="$1">
	<tuv xml:lang="pt_BR">
	<seg>${3:translation}</seg>
	</tuv>
	</tu>       
